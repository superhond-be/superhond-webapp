/* ===== DEBUG: stylesheet geladen ===== */
body::before {
  content: "✅ Stylesheet geladen (versie 2025-09-02)";
  display: block;
  background: #ff0066;
  color: #fff;
  text-align: center;
  font-weight: bold;
  padding: 6px;
  z-index: 9999;
}

/* ===== Reset & basis ===== */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  font-family: Arial, Helvetica, sans-serif;
  background: #f9f9f9;
  color: #333;
  line-height: 1.5;
}

/* ===== Navigatie ===== */
.topnav {
  background: #ffd300;
  padding: 10px 16px;
}

.topnav ul {
  list-style: none;
  display: flex;
  gap: 20px;
}

.topnav a {
  text-decoration: none;
  color: #222;
  font-weight: 600;
}

.topnav a:hover,
.topnav a.active {
  text-decoration: underline;
}

/* ===== Header ===== */
header {
  padding: 20px;
  text-align: center;
  background: #fff;
  border-bottom: 1px solid #eee;
}

header h1 {
  font-size: 1.5rem;
  color: #333;
}

/* ===== Main ===== */
main {
  padding: 20px;
  max-width: 1000px;
  margin: 0 auto;
}

/* ===== Cards ===== */
.card {
  background: #e6ffe6;   /* DEBUG: lichtgroen ipv wit */
  border: 2px solid #0a66ff; /* DEBUG: blauwe rand */
  border-radius: 10px;
  padding: 20px;
  margin-bottom: 20px;
  box-shadow: 0 1px 3px rgba(0,0,0,0.05);
}

.card h2 {
  font-size: 1.3rem;
  margin-bottom: 12px;
  border-bottom: 2px solid #ffd300;
  padding-bottom: 4px;
}

.card h3 {
  font-size: 1.1rem;
  margin: 10px 0;
  color: #444;
}

/* ===== Lists & tables ===== */
ul {
  list-style: disc inside;
  margin-left: 10px;
}

table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 10px;
}

th, td {
  border: 1px solid #ddd;
  padding: 8px;
}

th {
  background: #f5f5f5;
  text-align: left;
}

/* ===== Grid helpers ===== */
.row {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
}

.col {
  flex: 1 1 300px;
}

/* ===== Buttons ===== */
button,
.btn {
  background: #0a66ff;
  border: none;
  color: #fff;
  padding: 8px 14px;
  border-radius: 6px;
  cursor: pointer;
  font-size: 0.9rem;
  display: inline-block;
  text-decoration: none;
}

button:hover,
.btn:hover {
  background: #004ecc;
}

/* ===== Forms ===== */
form label {
  display: block;
  font-size: 0.9rem;
  margin-bottom: 10px;
}

input[type="text"],
input[type="number"],
textarea,
select {
  width: 100%;
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 6px;
  font-size: 0.95rem;
  margin-top: 4px;
}

textarea {
  resize: vertical;
}

input[type="checkbox"],
input[type="radio"] {
  margin-right: 6px;
  transform: scale(1.1);
}

/* ===== Footer ===== */
footer {
  background: #eee;
  padding: 12px;
  text-align: center;
  font-size: 0.85rem;
  color: #666;
  margin-top: 30px;
}

/* ===== Output blok (voor instellingen debug) ===== */
#output {
  white-space: pre-wrap;
  background: #f5f5f5;
  border: 1px solid #eee;
  border-radius: 6px;
  padding: 10px;
  font-size: 0.85rem;
  margin-top: 20px;
}

/* ===== Notifications ===== */
.notification {
  position: fixed;
  top: -60px;
  left: 50%;
  transform: translateX(-50%);
  padding: 10px 16px;
  border-radius: 6px;
  font-size: 0.9rem;
  color: #fff;
  opacity: 0.95;
  transition: top 0.4s ease;
  z-index: 1000;
}

.notification.show {
  top: 20px;
}

.notification.info { background: #0a66ff; }
.notification.success { background: #2e8b57; }
.notification.error { background: #d62828; }

/* public/Js/lessen-instellingen.js */

/* ===== Helpers ===== */
const store = {
  get: (k, f = []) => {
    try { return JSON.parse(localStorage.getItem(k)) ?? f; }
    catch { return f; }
  },
  set: (k, v) => localStorage.setItem(k, JSON.stringify(v)),
};
const uid = () => Math.random().toString(36).slice(2, 10);

/* ===== Tabs ===== */
document.addEventListener("DOMContentLoaded", () => {
  document.querySelectorAll(".tab-btn").forEach(btn => {
    btn.addEventListener("click", () => {
      document.querySelectorAll(".tab-btn").forEach(b => b.classList.remove("active"));
      document.querySelectorAll(".tab-panel").forEach(p => p.classList.remove("active"));
      btn.classList.add("active");
      document.getElementById(btn.dataset.tab).classList.add("active");
    });
  });

  setupLestype();
  setupThema();
  setupLocatie();
  setupTrainer();
});

/* ===== 1) LESTYPE (formulier-only, geen tabel, geen startdatum) ===== */
function setupLestype() {
  const KEY = "lessonTypes";
  const form = document.getElementById("form-type");
  const resetBtn = document.getElementById("reset-type");
  if (!form) return;

  resetBtn?.addEventListener("click", () => form.reset());

  form.addEventListener("submit", (e) => {
    e.preventDefault();
    const data = Object.fromEntries(new FormData(form).entries());

    // Validaties
    if (data.max_deelnemers && Number(data.max_deelnemers) < 1) {
      showNotification?.("Max deelnemers moet minstens 1 zijn.", "error"); return;
    }
    if (data.aantal_lessen && Number(data.aantal_lessen) < 1) {
      showNotification?.("Aantal lessen moet minstens 1 zijn.", "error"); return;
    }
    if (data.online === "J" && data.actief !== "J") {
      showNotification?.("Online zichtbaar kan alleen als Les actief = Ja.", "error"); return;
    }

    const list = store.get(KEY);
    if (!data.id) { data.id = uid(); list.push(data); }
    else {
      const i = list.findIndex(x => x.id === data.id);
      if (i !== -1) list[i] = data;
    }
    store.set(KEY, list);
    form.reset();
    showNotification?.("Lestype opgeslagen", "success");
  });
}

/* ===== 2) LES THEMA ===== */
function setupThema() {
  const KEY = "lessonThemes";
  const form = document.getElementById("form-thema");
  const tbody = document.querySelector("#table-thema tbody");
  const resetBtn = document.getElementById("reset-thema");
  if (!form || !tbody) return;

  const render = () => {
    const rows = store.get(KEY);
    if (!rows.length) {
      tbody.innerHTML = `<tr class="placeholder"><td colspan="3" style="text-align:center;color:#777;">
        Nog geen <strong>les thema’s</strong>. Voeg er één toe via het formulier hierboven.
      </td></tr>`;
      return;
    }
    tbody.innerHTML = rows.map(r => `
      <tr>
        <td>${r.naam ?? ""}</td>
        <td>${r.beschrijving ?? ""}</td>
        <td class="t-actions">
          <button class="btn" data-edit="${r.id}">Bewerken</button>
          <button class="btn" data-del="${r.id}">Verwijderen</button>
        </td>
      </tr>
    `).join("");
  };
  render();

  resetBtn?.addEventListener("click", () => form.reset());

  form.addEventListener("submit", e => {
    e.preventDefault();
    const data = Object.fromEntries(new FormData(form).entries());
    const list = store.get(KEY);
    if (!data.id) { data.id = uid(); list.push(data); }
    else {
      const i = list.findIndex(x => x.id === data.id);
      if (i !== -1) list[i] = data;
    }
    store.set(KEY, list);
    form.reset();
    render();
    showNotification?.("Les thema opgeslagen", "success");
  });

  tbody.addEventListener("click", e => {
    const editId = e.target.getAttribute("data-edit");
    const delId  = e.target.getAttribute("data-del");
    const list = store.get(KEY);

    if (editId) {
      const row = list.find(x => x.id === editId);
      if (!row) return;
      Object.entries(row).forEach(([k,v]) => { if (form[k]) form[k].value = v; });
      showNotification?.("Les thema geladen voor bewerking", "info");
    }
    if (delId) {
      store.set(KEY, list.filter(x => x.id !== delId));
      render();
      showNotification?.("Les thema verwijderd", "success");
    }
  });
}

/* ===== 3) LESLOCATIE ===== */
function setupLocatie() {
  const KEY = "lessonLocations";
  const form = document.getElementById("form-loc");
  const tbody = document.querySelector("#table-loc tbody");
  const resetBtn = document.getElementById("reset-loc");
  const mapBtn = document.getElementById("map-btn");
  if (!form || !tbody) return;

  const render = () => {
    const rows = store.get(KEY);
    if (!rows.length) {
      tbody.innerHTML = `<tr class="placeholder"><td colspan="5" style="text-align:center;color:#777;">
        Nog geen <strong>leslocaties</strong>. Vul het formulier in en druk <em>Opslaan</em>.
        Met <em>Bekijk locatie</em> open je Google Maps.
      </td></tr>`;
      return;
    }
    tbody.innerHTML = rows.map(r => `
      <tr>
        <td>${r.naam ?? ""}</td>
        <td>${r.adres ?? ""}</td>
        <td>${r.plaats ?? ""}</td>
        <td>${r.locatie ?? ""}</td>
        <td class="t-actions">
          <button class="btn" data-edit="${r.id}">Bewerken</button>
          <button class="btn" data-del="${r.id}">Verwijderen</button>
        </td>
      </tr>
    `).join("");
  };
  render();

  resetBtn?.addEventListener("click", () => form.reset());

  mapBtn?.addEventListener("click", () => {
    const adres = form.adres.value || "";
    const plaats = form.plaats.value || "";
    const q = encodeURIComponent(`${adres} ${plaats}`.trim());
    if (!q) { showNotification?.("Vul eerst Adres/Plaats in.", "error"); return; }
    window.open(`https://www.google.com/maps/search/?api=1&query=${q}`, "_blank");
  });

  form.addEventListener("submit", e => {
    e.preventDefault();
    const data = Object.fromEntries(new FormData(form).entries());
    const list = store.get(KEY);
    if (!data.id) { data.id = uid(); list.push(data); }
    else {
      const i = list.findIndex(x => x.id === data.id);
      if (i !== -1) list[i] = data;
    }
    store.set(KEY, list);
    form.reset();
    render();
    showNotification?.("Leslocatie opgeslagen", "success");
  });

  tbody.addEventListener("click", e => {
    const editId = e.target.getAttribute("data-edit");
    const delId  = e.target.getAttribute("data-del");
    const list = store.get(KEY);

    if (editId) {
      const row = list.find(x => x.id === editId);
      if (!row) return;
      Object.entries(row).forEach(([k,v]) => { if (form[k] !== undefined) form[k].value = v; });
      showNotification?.("Leslocatie geladen voor bewerking", "info");
    }
    if (delId) {
      store.set(KEY, list.filter(x => x.id !== delId));
      render();
      showNotification?.("Leslocatie verwijderd", "success");
    }
  });
}

/* ===== 4) LES TRAINERS ===== */
function setupTrainer() {
  const KEY = "lessonTrainers";
  const form = document.getElementById("form-trainer");
  const tbody = document.querySelector("#table-trainer tbody");
  const resetBtn = document.getElementById("reset-trainer");
  if (!form || !tbody) return;

  const render = () => {
    const rows = store.get(KEY);
    if (!rows.length) {
      tbody.innerHTML = `<tr class="placeholder"><td colspan="3" style="text-align:center;color:#777;">
        Nog geen <strong>les trainers</strong>. Voeg er één toe via het formulier.
      </td></tr>`;
      return;
    }
    tbody.innerHTML = rows.map(r => `
      <tr>
        <td>${r.naam ?? ""}</td>
        <td>${r.functie ?? ""}</td>
        <td class="t-actions">
          <button class="btn" data-edit="${r.id}">Bewerken</button>
          <button class="btn" data-del="${r.id}">Verwijderen</button>
        </td>
      </tr>
    `).join("");
  };
  render();

  resetBtn?.addEventListener("click", () => form.reset());

  form.addEventListener("submit", e => {
    e.preventDefault();
    const data = Object.fromEntries(new FormData(form).entries());
    const list = store.get(KEY);
    if (!data.id) { data.id = uid(); list.push(data); }
    else {
      const i = list.findIndex(x => x.id === data.id);
      if (i !== -1) list[i] = data;
    }
    store.set(KEY, list);
    form.reset();
    render();
    showNotification?.("Les trainer opgeslagen", "success");
  });

  tbody.addEventListener("click", e => {
    const editId = e.target.getAttribute("data-edit");
    const delId  = e.target.getAttribute("data-del");
    const list = store.get(KEY);

    if (editId) {
      const row = list.find(x => x.id === editId);
      if (!row) return;
      Object.entries(row).forEach(([k,v]) => { if (form[k]) form[k].value = v; });
      showNotification?.("Les trainer geladen voor bewerking", "info");
    }
    if (delId) {
      store.set(KEY, list.filter(x => x.id !== delId));
      render();
      showNotification?.("Les trainer verwijderd", "
        
        /* Kleine icoonknoppen voor tabel-acties */
.icon-btn{
  border:1px solid #ddd;background:#fff;width:28px;height:28px;border-radius:6px;
  display:inline-flex;align-items:center;justify-content:center;margin:0 4px;
  cursor:pointer;font-size:14px;line-height:1
}
.icon-btn:hover{background:#f5f5f5}
.icon-btn.edit{border-color:#98c1ff}
.icon-btn.delete{border-color:#ffc0c0}
.icon-btn.view{border-color:#ffd08a}

.icon-btn{
  border:1px solid #ddd;background:#fff;width:28px;height:28px;border-radius:6px;
  display:inline-flex;align-items:center;justify-content:center;margin:0 4px;
  cursor:pointer;font-size:14px;line-height:1
}
.icon-btn:hover{background:#f5f5f5}
.icon-btn.edit{border-color:#98c1ff}
.icon-btn.delete{border-color:#ffc0c0}
.icon-btn.view{border-color:#ffd08a}
        


